import calendar
from datetime import datetime

from aiogram import types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

languages = types.InlineKeyboardMarkup(row_width=1)
languages.add(types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'))
languages.add(types.InlineKeyboardButton("üá∫üáø O'zbek", callback_data='ozb'))


start_m = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
start_btn1 = ['üè• –û –ö–ª–∏–Ω–∏–∫–µ', 'üíµ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç']
start_btn2= ['üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º']
start_btn3= ['üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
start_m.add(*start_btn1)
start_m.add(*start_btn2)
start_m.add(*start_btn3)


back = InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='back')
back_markup = types.InlineKeyboardMarkup().add(back)

back_ad = InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='back_ad')
back_admin = types.InlineKeyboardMarkup().add(back_ad)

app_confirm = InlineKeyboardMarkup(row_width=1)
confirm = InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='confirm')
app_confirm.add(confirm)
app_confirm.add(back)


del_confirm = InlineKeyboardMarkup(row_width=1)
delete = InlineKeyboardButton('‚úÖ –î–∞', callback_data='del_confirm')
del_confirm.add(delete)
del_confirm.add(back)


cancel_m = InlineKeyboardMarkup(row_width=1)
cancel = InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='cancel')
cancel_m.add(cancel)
cancel_m.add(back)

user_m = InlineKeyboardMarkup(row_width=1)
user_m.add(types.InlineKeyboardButton("‚úè –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_app'))
user_m.add(types.InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data='ch_name'))
user_m.add(types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='ch_number'))
user_m.add(back)


admin_keyboard = InlineKeyboardMarkup(row_width=2)
admin_keyboard.add(
    InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_show_users'),
    InlineKeyboardButton('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='broadcast'),
    InlineKeyboardButton('üíµ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç', callback_data='price_list'),
    InlineKeyboardButton('üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏', callback_data='view_app'),
    InlineKeyboardButton('üìù –ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data='calendar')
)


broadcast_option_menu = InlineKeyboardMarkup(row_width=1)
broadcast_option_menu.add(
    InlineKeyboardButton(text='üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º', callback_data='broadcast_all'),
    InlineKeyboardButton(text='üì£ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–ø–∏—Å—è–º–∏', callback_data='broadcast_with_appointments'),
    InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back_ad')
)


price_list = InlineKeyboardMarkup(row_width=1)
price_list.add(InlineKeyboardButton('‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç', callback_data='ch_price'))
price_list.add(InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='back_ad'))


price_edit_callback = CallbackData("price_edit", "service_index")


def create_price_edit_keyboard(prices):
    buttons = [InlineKeyboardButton(f'{index + 1}. {price.service}', callback_data=price_edit_callback.new(service_index=index)) for index, price in enumerate(prices)]
    return InlineKeyboardMarkup(inline_keyboard=[[button] for button in buttons])


russian_month_names = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ]


def get_admin_calendar_menu(year, month, selected_day=None, selected_month=None):
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month
    current_day = current_date.day

    max_days = calendar.monthrange(year, month)[1]

    # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)

    next_month = (month + 1) % 12
    row = []
    if year == current_year and month != current_month:
        row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f'prev:{year}-{month:02d}'))
    row.append(InlineKeyboardButton(
        text=month_names[month - 1],  # –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        callback_data=f'month:{year}-{month:02d}'
    ))
    if (year == current_year and next_month >= current_month and next_month != current_month + 2) or (
            year > current_year):
        row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f'next:{year}-{next_month:02d}'))
    keyboard.row(*row)

    day_buttons = []
    day_row = []
    for day in range(1, max_days + 1):
        if (year == current_year and month == current_month and day < current_day) or (
                year == current_year and month < current_month):
            continue

        appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
        available_hours = db.get_available_hours(appointments_on_day)

        if available_hours:
            button_text = f"{day} ‚úÖ" if selected_day == day and selected_month == month else str(day)
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'admin_day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)
        else:
            button_text = f"{day} ‚ùå" if selected_day == day and selected_month == month else f"{day} ‚ùå"
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'admin_day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)

        if len(day_row) == 5:
            day_buttons.append(day_row)
            day_row = []

    if day_row:
        day_buttons.append(day_row)

    for row in day_buttons:
        keyboard.row(*row)

    keyboard.row(InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='admin_back'))

    return keyboard


def get_admin_hour_menu(year, month, day, selected_hour=None):
    start_hour = 8
    end_hour = 18
    keyboard = InlineKeyboardMarkup(row_width=3)

    appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
    available_hours = db.get_available_hours(appointments_on_day)

    for hour in range(start_hour, end_hour + 1):
        for minute in range(0, 60, 30):
            if hour == end_hour and minute > 0:
                break
            formatted_time = f"{hour:02d}:{minute:02d}"
            if formatted_time in available_hours:
                button_text = f"{formatted_time} ‚úÖ" if formatted_time == selected_hour else formatted_time
                button = InlineKeyboardButton(text=button_text, callback_data=f'admin_hour:{formatted_time}')
                keyboard.insert(button)
            else:
                button_text = f"{formatted_time} ‚ùå" if formatted_time == selected_hour else formatted_time
                button = InlineKeyboardButton(text=button_text, callback_data=f'admin_hour:{formatted_time}')
                keyboard.insert(button)

    back_button = InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='admin_hour_back')
    keyboard.row(back_button)

    return keyboard



# current_prices = {
#     '–†—É—Ç–∏–Ω–Ω–æ–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': '100-$175',
#     '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤': '$75-$210',
#     '–°–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π': '$150-$320 –∑–∞ –∫–≤–∞–¥—Ä–∞–Ω—Ç',
#     '–î–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≥–µ—Ä–º–µ—Ç–∏–∫': '$20-$50 –∑–∞ –∑—É–±',
#     '–ó—É–±–Ω–æ–µ –∏–ª–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ': '$100-$550',
#     '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑—É–±–æ–≤': '$75-$250',
#     '–õ–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞': '$500-$1,500',
#     '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–æ—Å—Ç—ã': '$750-$5,000',
#     '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä–æ–Ω—ã': '$1,000-$1,500',
#     '–ó—É–±–Ω—ã–µ –ø—Ä–æ—Ç–µ–∑—ã': '$500-$8,000'
# }
#
#
# def create_price_edit_keyboard():
#     buttons = [
#         InlineKeyboardButton(f'{service}: {current_prices.get(service, "N/A")}', callback_data=f"edit_price:{service}")
#         for service in current_prices
#     ]
#     return InlineKeyboardMarkup(inline_keyboard=[buttons])


