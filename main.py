import asyncio
import calendar
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import db,re,keyboard
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.markdown as fmt
from fsm import Users, Update, Appointment


API_TOKEN = '6494026269:AAFptKHhMWHC2vCbUBNfNwrij-dDHANbkdw'

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
tmp = {}


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message, state: FSMContext):
    exist_user = db.check_existing(message.chat.id)
    if not exist_user:
        await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ <b>Denta Art</b>\n <b><i>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</i></b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n üëã<b>Denta Art</b> stomatologiyasi telegram- botiga xush kelibsiz\n <b><i>Interfeys tilini tanlang:</i></b>', reply_markup=keyboard.languages)

        @dp.callback_query_handler(lambda c: c.data == 'ru')
        async def process_callback_ru(callback_query: types.CallbackQuery):
            await bot.send_message(callback_query.from_user.id, "<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ 1/2üìù</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è <b>(—Ñ–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)</b>")
            user_id = message.from_user.id
            await Users.Name.set()

        @dp.callback_query_handler(lambda c: c.data == 'ozb')
        async def process_callback_ozb(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id, text="Siz O'zbek tilini tanladingiz.")
            await bot.send_message(callback_query.from_user.id, "Siz O'zbek tilini tanladingiz.")

    else:
        await message.answer("üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ <b>Denta Art</b>! –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ. "
                             "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É <u>+998902706390</u>.", reply_markup=keyboard.start_m)


@dp.message_handler(state=Users.Name)
async def phnum(message: types.Message, state: FSMContext):
    name_input = message.text
    lastname_name_surname = name_input.split()

    if len(lastname_name_surname) == 3:
        lastname, name, surname = lastname_name_surname
        if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+$', name_input):
            lastname = lastname.capitalize()
            name = name.capitalize()
            surname = surname.capitalize()
            lastname_name_surname = lastname + ' ' + name + ' ' + surname
            await state.update_data(name=lastname_name_surname)
            await message.answer(
                '<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ 2/2üìù</b>\n üìû–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–ø–∏—Å–∏.\n<b>–§–æ—Ä–º–∞—Ç:</b> <u>+998902706390</u>')
            await Users.Phnum.set()
        else:
            await message.answer(
                "‚ö†Ô∏è –ö–∞–∂–µ–º—Å—è, –≤—ã –≤–≤–µ–ª–∏ –§–ò–û –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    else:
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.')


@dp.message_handler(state=Users.Phnum)
async def addphnum(message: types.Message, state: FSMContext):
    phnum = message.text
    if re.match(r'^\+998\d{9}$', phnum):
        await state.update_data(phnum=phnum)
        data = await state.get_data()
        db.add_user(message.chat.id, first_name=message.from_user.first_name, username=message.from_user.username, name=data['name'], phnum=data['phnum'])
        await state.finish()
        await message.answer(
            "üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ <b>Denta Art</b>! –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ. "
            "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É <u>+998902706390</u>.", reply_markup=keyboard.start_m)

    else:
        await message.answer('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXXXX.')


@dp.message_handler(text='üè• –û –ö–ª–∏–Ω–∏–∫–µ')
async def about(message: types.Message):
    loading_msg = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..', reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await message.answer('üè• <b>Denta Art</b> - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞,'
                         '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥.\n<b>–ù–∞—à–∏ –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b> <i>–≥. –°–∞–º–∞—Ä–∫–∞–Ω–¥, —É–ª. –§–∏—Ç—Ä–∞—Ç, 47,</i> <u>+998902706390</u>.\n'
                         '<b>–î–∏—Ä–µ–∫—Ç–æ—Ä:</b> –°–∞–¥—É–ª–ª–∞–µ–≤ –ê–Ω–≤–∞—Ä\n'
                         '<b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> C 8:00 –¥–æ 18:00', reply_markup=keyboard.back_markup)


@dp.message_handler(text='üíµ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç')
async def price(message: types.Message):
    loading_msg = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞...', reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
    prices = db.get_all_prices()
    price_list_text = 'üíµ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ "Denta Art":\n'
    for index, price in enumerate(prices, start=1):
        price_list_text += f"{index}. <b>{price.service}:</b> {price.price}\n"
    await message.answer(price_list_text, parse_mode="HTML", reply_markup=keyboard.back_markup)


@dp.message_handler(text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def user_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = message.chat.id
        user_info = db.get_user_info(chat_id)
        name = user_info['name']
        num = user_info['phnum']
        loading_msg = await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
        await message.answer(f'<b>–í–∞—à–µ –§–ò–û:</b> {name}\n<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {num}\n'
                             'üë§ –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ <b>(–û —Å–µ–±–µ)</b> –∏–ª–∏ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "‚úè–ú–æ–∏ –∑–∞–ø–∏—Å–∏"\n\n\n'
                             ' <b><i>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å:</i></b>\n–ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "üîô–ù–∞–∑–∞–¥"', reply_markup=keyboard.user_m)


@dp.callback_query_handler(lambda c: c.data == 'back', state='*')
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.finish()
    await callback.message.answer("üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ <b>Denta Art</b>! –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ. "
                             "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É <u>+998902706390</u>.", reply_markup=keyboard.start_m)


@dp.callback_query_handler(lambda c: c.data == 'ch_name')
async def change_name(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'", reply_markup=types.ReplyKeyboardRemove())
    await Update.Name.set()


@dp.callback_query_handler(lambda c: c.data == 'ch_number')
async def change_number(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ '+998XXXXXXXXX'.", reply_markup=types.ReplyKeyboardRemove())
    await Update.Phnum.set()


@dp.message_handler(state=Update.Name)
async def set_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = message.chat.id
        new_name = message.text
        if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+$', new_name):
            old_data = await state.get_data()
            db.update_user(chat_id, name=new_name, phnum=old_data.get('phnum'))
            await state.finish()
            await message.answer('‚úÖ <i>–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</i>', reply_markup=keyboard.back_markup)
        else:
            await message.answer("‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –§–ò–û –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@dp.message_handler(state=Update.Phnum)
async def set_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = message.chat.id
        new_number = message.text
        if re.match(r'^\+998\d{9}$', new_number):
            old_data = await state.get_data()
            db.update_user(chat_id, name=old_data.get('name'), phnum=new_number)
            await state.finish()
            await message.answer('‚úÖ <i>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</i>', reply_markup=keyboard.back_markup)
        else:
            await message.answer("‚ö†Ô∏è <i>–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ </i> '+998XXXXXXXXX'\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä,<u>'+998902706390'.</u> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: </b>")


def get_calendar_menu(year, month, selected_day=None):
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month
    current_day = current_date.day

    max_days = calendar.monthrange(year, month)[1]

    keyboard = InlineKeyboardMarkup(row_width=5)
    next_month = (month + 1) % 12
    row = []
    if year == current_year and month != current_month:
        row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f'prev:{year}-{month:02d}'))
    row.append(InlineKeyboardButton(
        text=calendar.month_name[month],
        callback_data=f'month:{year}-{month:02d}'
    ))
    if (year == current_year and next_month >= current_month and next_month != current_month + 2) or (
            year > current_year):
        row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f'next:{year}-{next_month:02d}'))

    keyboard.row(*row)

    day_buttons = []
    day_row = []
    for day in range(1, max_days + 1):
        if (year == current_year and month == current_month and day < current_day) or (
                year == current_year and month < current_month):
            continue
        button = InlineKeyboardButton(text=str(day), callback_data=json.dumps(
            {'action': 'day', 'year': year, 'month': month, 'day': day}))
        day_row.append(button)
        if len(day_row) == 5:
            day_buttons.append(day_row)
            day_row = []

    if day_row:
        day_buttons.append(day_row)

    for row in day_buttons:
        keyboard.row(*row)

    return keyboard


def get_hour_menu():
    current_hour = 8
    keyboard = InlineKeyboardMarkup(row_width=3)

    for hour in range(current_hour, 19):
        for minute in range(0, 60, 30):
            formatted_time = f"{hour:02d}:{minute:02d}"
            button = InlineKeyboardButton(text=formatted_time, callback_data=f'hour:{formatted_time}')
            keyboard.insert(button)

    return keyboard


@dp.message_handler(text='üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º')
async def start_appointment(message: types.Message):
    current_year = datetime.now().year
    current_month = datetime.now().month
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_menu(current_year, current_month))
    await Appointment.SET_DAY.set()


@dp.callback_query_handler(lambda c: c.data.startswith('prev:') or c.data.startswith('next:'),
                           state=Appointment.SET_DAY)
async def navigate_calendar(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split(':')
    direction = data[0]  # 'prev' or 'next'
    selected_year, selected_month = map(int, data[1].split('-'))
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month

    if direction == 'prev':
        prev_month = (selected_month - 1) % 12
        prev_year = selected_year - 1 if prev_month == 0 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_menu(prev_year, prev_month))
        await state.update_data(selected_month=prev_month)
    elif direction == 'next':
        next_month = (selected_month) % 12
        next_year = selected_year + 1 if next_month == 1 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_menu(next_year, next_month))
        await state.update_data(selected_month=next_month)


@dp.callback_query_handler(lambda c: json.loads(c.data).get('action') == 'day', state=Appointment.SET_DAY)
async def set_day(callback_query: CallbackQuery, state: FSMContext):
    data = json.loads(callback_query.data)
    selected_year = data.get('year')
    selected_month = data.get('month')
    selected_day = data.get('day')
    await state.update_data(selected_day=selected_day)
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:', reply_markup=get_hour_menu())
    await Appointment.SET_HOUR.set()


@dp.callback_query_handler(lambda c: c.data.startswith('hour:'), state=Appointment.SET_HOUR)
async def set_hour(callback_query: CallbackQuery, state: FSMContext):
    selected_hour = int(callback_query.data.split(':')[1])

    data = await state.get_data()
    selected_month = data.get('selected_month')
    selected_day = data.get('selected_day')

    if selected_month is None:
        selected_month = datetime.now().month  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if selected_day is None:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å.")
        return

    try:
        appointment_time = datetime(
            year=datetime.now().year,
            month=selected_month,
            day=selected_day,
            hour=selected_hour
        )
    except TypeError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø–∏—Å–∏:')

    await state.update_data(appointment_time=appointment_time)
    await Appointment.SET_REASON.set()


@dp.message_handler(lambda message: True, state=Appointment.SET_REASON)
async def save_appointment_reason(message: types.Message, state: FSMContext):
    appointment_time = (await state.get_data())['appointment_time']
    chat_id = message.chat.id
    user_info = db.get_user_info(chat_id)
    user_id = message.from_user.id
    reason = message.text.strip()
    name = user_info['name']
    phnum = user_info['phnum']

    db.create_appointment(user_id, message.from_user.username, name, phnum, reason, appointment_time)

    await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {appointment_time.strftime("%d.%m.%Y %H:%M")}')
    await state.finish()

if __name__ == '__main__':
    from aiogram import executor
    from admin import *
    executor.start_polling(dp, skip_updates=True)