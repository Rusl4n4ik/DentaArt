import asyncio
import calendar
import json
import math
import re
from datetime import datetime, timedelta

from aiogram import types
from charset_normalizer import md

from main import navigate_calendar
from aiogram.dispatcher.filters import Text, state
from aiogram.types import ReplyKeyboardRemove, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from aiogram.utils.callback_data import CallbackData
from fsm import Admins, Appointment, Offline
from main import dp, bot
import db, keyboard, main
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from fsm import Users, Update


@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    chat_id = message.chat.id
    if db.is_admin(chat_id):
        db.add_admin(chat_id, message.from_user.first_name, message.from_user.username)
        await message.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@dp.callback_query_handler(lambda c: c.data == 'back_ad', state='*')
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    state_data = await state.get_data()
    print(current_state)
    if current_state == 'Admins:HOUR_CHOOSE':
        await state.reset_state()
        await show_admin_calendar_from_button(callback)
    elif current_state == 'Offline:SET_HOUR':
        await state.reset_state()
        await set_phnum_offline(callback, state)
    elif current_state == 'Offline:SET_REASON':
        await choose_time(callback, state)
    else:
        await callback.message.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.admin_keyboard)


@dp.callback_query_handler(text="broadcast", state="*")
async def broadcast_button_handler(callback_query: CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    if db.is_admin(chat_id):
        await callback_query.answer()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard.broadcast_option_menu)
        await Admins.Broadcast.set()
    else:
        await callback_query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.callback_query_handler(text="broadcast_option", state=Admins.Broadcast)
async def broadcast_option_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard.broadcast_option_menu)


@dp.callback_query_handler(text="broadcast_all", state=Admins.Broadcast)
async def broadcast_all_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard.back_admin)
    await Admins.BroadcastTextAll.set()


@dp.callback_query_handler(text="broadcast_with_appointments", state=Admins.Broadcast)
async def broadcast_with_appointments_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–ø–∏—Å—è–º–∏:", reply_markup=keyboard.back_admin)
    await Admins.BroadcastTextAppointments.set()


@dp.message_handler(commands=("cancel"), state=Admins.Broadcast)
@dp.message_handler(Text(equals="/cancel", ignore_case=True), state=Admins.Broadcast)
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard.back_admin)


@dp.message_handler(state=Admins.BroadcastTextAll)
async def process_broadcast_all(message: types.Message, state: FSMContext):
    users = db.get_all_users()
    total_users = len(users)
    if total_users >= 1:
        for user in users:
            chat_id = user['chat_id']
            await bot.send_message(chat_id, message.text)
        await state.finish()
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=keyboard.back_admin)
    else:
        await state.finish()
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=keyboard.back_admin)


@dp.message_handler(state=Admins.BroadcastTextAppointments)
async def process_broadcast_appointments(message: types.Message, state: FSMContext):
    users_with_appointments = db.get_users_with_appointments(db.session)
    total_users = len(users_with_appointments)
    if total_users >= 1:
        for user in users_with_appointments:
            chat_id = user.chat_id
            await bot.send_message(chat_id, message.text)
        await state.finish()
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–ø–∏—Å—è–º–∏.", reply_markup=keyboard.back_admin)
    else:
        await state.finish()
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=keyboard.back_admin)


@dp.callback_query_handler(lambda c: c.data == 'admin_show_users')
async def admin_show_users(callback: types.CallbackQuery):
    users = db.get_all_users()
    if users:
        page = 0
        per_page = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_pages = (len(users) + per_page - 1) // per_page

        user_list = ""
        for idx, user in enumerate(users[page * per_page:(page + 1) * per_page], start=page * per_page + 1):
            appointments = db.get_appointments(db.session, user['chat_id'])
            appointments_info = ', '.join([appointment.time.strftime('%d %b %Y %H:%M') for appointment in appointments])
            user_info = f"<b>{idx}</b>. {user['name']}:\n{user['phnum']}\n"
            if appointments_info:
                user_info += "<b>üìù –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
                for appointment in appointments:
                    appointment_date = appointment.time.strftime(
                        f"%e {keyboard.russian_month_names[appointment.time.month - 1]} %Y –≥–æ–¥–∞")
                    appointment_time_str = appointment.time.strftime("%H:%M")
                    user_info += f"{appointment_date} –≤ {appointment_time_str}\n"
            user_list += user_info + "\n"

        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_show_users_page:{page - 1}"))
        if page < total_pages - 1:
            navigation_buttons.append(
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_show_users_page:{page + 1}"))

        reply_markup = InlineKeyboardMarkup().add(*navigation_buttons)

        await callback.answer()
        await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=reply_markup, parse_mode="HTML")
    else:
        await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@dp.callback_query_handler(lambda c: c.data.startswith('admin_show_users_page:'))
async def admin_show_users_page(callback: types.CallbackQuery):
    page = int(callback.data.split(':')[1])
    users = db.get_all_users()
    per_page = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(users) + per_page - 1) // per_page

    user_list = ""
    for idx, user in enumerate(users[page * per_page:(page + 1) * per_page], start=page * per_page + 1):
        appointments = db.get_appointments(db.session, user['chat_id'])
        appointments_info = ', '.join([appointment.time.strftime('%d %b %Y %H:%M') for appointment in appointments])
        user_info = f"<b>{idx}</b>. {user['name']}:\n{user['phnum']}\n"
        if appointments_info:
            user_info += "<b>üìù –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
            for appointment in appointments:
                appointment_date = appointment.time.strftime(
                    f"%e {keyboard.russian_month_names[appointment.time.month - 1]} %Y –≥–æ–¥–∞")
                appointment_time_str = appointment.time.strftime("%H:%M")
                user_info += f"{appointment_date} –≤ {appointment_time_str}\n"
        if len(user_list + user_info) >= 4096:
            break
        user_list += user_info + "\n"

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_show_users_page:{page - 1}"))
    if page < total_pages - 1:
        navigation_buttons.append(
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_show_users_page:{page + 1}"),)
    reply_markup = InlineKeyboardMarkup(row_width=2)
    for button in navigation_buttons:
        reply_markup.insert(button)
    reply_markup.row(keyboard.back_ad)

    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=reply_markup, parse_mode="HTML")


def get_user_appointments_info(user):
    appointments = db.get_user_appointments(db.session, user['chat_id'])
    if appointments:
        appointments_info = ', '.join([appointment.time.strftime('%d %b %Y %H:%M') for appointment in appointments])

        return appointments_info
    return None


@dp.message_handler(commands=['add_service'])
async def add_service_command(message: types.Message):
    if db.is_admin(message.chat.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")
        await Admins.AddServiceName.set()
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.message_handler(state=Admins.AddServiceName)
async def add_service_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Admins.AddServicePrice.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")


@dp.message_handler(lambda message: True, state=Admins.AddServicePrice)
async def add_service_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        name = data['name']
    price = message.text
    db.add_price_and_service(name, price)
    await message.answer(f"–£—Å–ª—É–≥–∞ '{name}' —Å —Ü–µ–Ω–æ–π {price} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.")
    await state.finish()


@dp.callback_query_handler(text="price_list")
async def show_price_list(callback_query: CallbackQuery):
    await callback_query.answer()

    prices = db.get_all_prices()
    price_list_text = 'üíµ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ "Denta Art":\n'
    for index, price in enumerate(prices, start=1):
        price_list_text += f"{index}. <b>{price.service}:</b> {price.price}\n"
    await callback_query.message.answer(price_list_text, reply_markup=keyboard.price_list)


@dp.callback_query_handler(text="ch_price")
async def edit_price_list(callback_query: CallbackQuery):
    await callback_query.answer()

    prices = db.get_all_prices()
    markup = keyboard.create_price_edit_keyboard(prices)

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∞–π—Å:",
                                        reply_markup=markup)


@dp.callback_query_handler(keyboard.price_edit_callback.filter())
async def edit_selected_service(callback_query: CallbackQuery, callback_data: dict):
    await callback_query.answer()

    service_index = int(callback_data["service_index"])
    selected_service = db.get_price_by_index(service_index)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

    if selected_service:
        buttons = [
            InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f"edit_name:{service_index}"),
            InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å', callback_data=f"ed_price:{service_index}"),
            InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='ch_price')
        ]

        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(*buttons)

        await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É—Å–ª—É–≥–∏ '{selected_service.service}':",
                                            reply_markup=markup)
    else:
        await callback_query.message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=keyboard.price_list)


@dp.callback_query_handler(lambda c: c.data.startswith("ed_price:"), state="*")
async def edit_service_price(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()

    service_index = int(callback_query.data.split(":")[1])
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å –¥–ª—è —É—Å–ª—É–≥–∏ '{service_index + 1}':")

    async with state.proxy() as data:
        data["editing_service"] = service_index

    await Admins.EditPriceAmount.set()


@dp.message_handler(lambda message: True, state=Admins.EditPriceAmount)
async def save_new_service_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        service_index = data["editing_service"]

    new_price = message.text.strip()

    if new_price:
        service = db.get_price_by_index(service_index)
        if service:
            session = db.Session()
            db.update_service_price(session, service.service, new_price)
            session.close()
            await message.answer("–ù–æ–≤—ã–π –ø—Ä–∞–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=keyboard.back_admin)
        else:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    await state.finish()


@dp.callback_query_handler(text='view_app')
async def view_appointments(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()

    appointments = db.get_all_appointments(db.session)  # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π

    page_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_number = 1  # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    start_idx = (page_number - 1) * page_size
    end_idx = min(start_idx + page_size, len(appointments))

    if appointments:
        message = f"–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}/{math.ceil(len(appointments) / page_size)}):\n\n"
        for idx, appointment in enumerate(appointments[start_idx:end_idx], start=start_idx + 1):
            appointment_date = appointment.time.strftime(
                f"%d {keyboard.russian_month_names[appointment.time.month - 1]} %Y –≥–æ–¥–∞").lstrip('0')
            appointment_time_str = appointment.time.strftime("%H:%M")
            appointment_reason = appointment.reason

            user_info = db.get_user_info(appointment.chat_id)
            if user_info:
                user_name = user_info['name']
                user_phnum = user_info['phnum']
            else:
                user_name = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                user_phnum = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            message += (
                f"<b>–ó–∞–ø–∏—Å—å #{idx}</b>\n"
                f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {appointment_date}\n"
                f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {appointment_time_str}\n"
                f"<b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {user_name}\n"
                f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_phnum}\n"
                f"<b>–°–∏–º–ø—Ç–æ–º—ã/—Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞:</b> {appointment_reason}\n\n"
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        navigation_buttons = []
        if len(appointments) > end_idx:
            navigation_buttons.append(
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="view_app_next_page"))
        if page_number > 1:
            navigation_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="view_app_prev_page"))

        if navigation_buttons:
            reply_markup = InlineKeyboardMarkup(row_width=1)
            for button in navigation_buttons:
                reply_markup.insert(button)
            reply_markup.row(keyboard.back_ad)
        else:
            reply_markup = InlineKeyboardMarkup().add(keyboard.back_ad)

        await callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode='HTML')


@dp.callback_query_handler(text='view_app_next_page')
async def view_app_next_page(callback_query: CallbackQuery):
    await view_app_page_navigation(callback_query, forward=True)


@dp.callback_query_handler(text='view_app_prev_page')
async def view_app_prev_page(callback_query: CallbackQuery):
    await view_app_page_navigation(callback_query, forward=False)


async def view_app_page_navigation(callback_query: CallbackQuery, forward: bool):
    await callback_query.answer()

    page_number = int(callback_query.data.split(':')[1]) if ':' in callback_query.data else 1

    if forward:
        page_number += 1
    else:
        page_number -= 1

    await view_app_page_update(callback_query, page_number)


@dp.callback_query_handler(lambda c: c.data.startswith('view_app_page:'))
async def view_app_page(callback_query: CallbackQuery):
    await callback_query.answer()

    page_number = int(callback_query.data.split(':')[1])  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_query

    await view_app_page_update(callback_query, page_number)


async def view_app_page_update(callback_query: CallbackQuery, page_number: int):
    appointments = db.get_all_appointments(db.session)  # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π

    page_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    start_idx = (page_number - 1) * page_size
    end_idx = min(start_idx + page_size, len(appointments))

    if appointments:
        message = f"–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}/{math.ceil(len(appointments) / page_size)}):\n\n"
        for idx, appointment in enumerate(appointments[start_idx:end_idx], start=start_idx + 1):
            appointment_date = appointment.time.strftime(
                f"%d {keyboard.russian_month_names[appointment.time.month - 1]} %Y –≥–æ–¥–∞").lstrip('0')
            appointment_time_str = appointment.time.strftime("%H:%M")
            appointment_reason = appointment.reason

            user_info = db.get_user_info(appointment.chat_id)
            if user_info:
                user_name = user_info['name']
                user_phnum = user_info['phnum']
            else:
                user_name = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                user_phnum = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            message += (
                f"<b>–ó–∞–ø–∏—Å—å #{idx}</b>\n"
                f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {appointment_date}\n"
                f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {appointment_time_str}\n"
                f"<b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {user_name}\n"
                f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_phnum}\n"
                f"<b>–°–∏–º–ø—Ç–æ–º—ã/—Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞:</b> {appointment_reason}\n\n"
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        navigation_buttons = []

        if page_number > 1:
            navigation_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"view_app_page:{page_number - 1}"))

        if end_idx < len(appointments):
            navigation_buttons.append(
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"view_app_page:{page_number + 1}"))

        reply_markup = InlineKeyboardMarkup(row_width=1)
        for button in navigation_buttons:
            reply_markup.insert(button)
        reply_markup.row(keyboard.back_ad)

        await callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode='HTML')


def get_calendar_menu(year, month, selected_day=None, selected_month=None):
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month
    current_day = current_date.day

    max_days = calendar.monthrange(year, month)[1]

    # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)

    next_month = (month + 1) % 12
    row = []
    if year == current_year and month != current_month:
        row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f'prev:{year}-{month:02d}'))
    row.append(InlineKeyboardButton(
        text=month_names[month - 1],  # –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        callback_data=f'month:{year}-{month:02d}'
    ))
    if (year == current_year and next_month >= current_month and next_month != current_month + 2) or (
            year > current_year):
        row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f'next:{year}-{next_month:02d}'))
    keyboard.row(*row)

    day_buttons = []
    day_row = []
    for day in range(1, max_days + 1):
        if (year == current_year and month == current_month and day < current_day) or (
                year == current_year and month < current_month):
            continue

        appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
        available_hours = db.get_available_hours(appointments_on_day)

        if available_hours:
            button_text = f"{day} ‚úÖ" if selected_day == day and selected_month == month else str(day)
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)
        else:
            button_text = f"{day} ‚ùå" if selected_day == day and selected_month == month else f"{day} ‚ùå"
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)

        if len(day_row) == 5:
            day_buttons.append(day_row)
            day_row = []

    if day_row:
        day_buttons.append(day_row)

    for row in day_buttons:
        keyboard.row(*row)

    keyboard.row(InlineKeyboardButton("üïò –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data='action:choose_time'))
    keyboard.row(InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='back_ad'))

    return keyboard


def get_hour_menu(year, month, day, selected_hour=None):
    start_hour = 8
    end_hour = 18
    keyboard = InlineKeyboardMarkup(row_width=3)

    appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
    available_hours = db.get_available_hours(appointments_on_day)

    for hour in range(start_hour, end_hour + 1):
        for minute in range(0, 60, 30):
            if hour == end_hour and minute > 0:
                break
            formatted_time = f"{hour:02d}:{minute:02d}"
            if formatted_time in available_hours:
                button_text = f"{formatted_time} ‚úÖ" if formatted_time == selected_hour else formatted_time
                button = InlineKeyboardButton(text=button_text, callback_data=f'hour:{formatted_time}')
                keyboard.insert(button)

    back_button = InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='back_ad')
    keyboard.row(back_button)

    return keyboard


@dp.callback_query_handler(lambda c: c.data.startswith('prev:') or c.data.startswith('next:'),)
async def navigate_calendar(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split(':')
    direction = data[0]  # 'prev' or 'next'
    selected_year, selected_month = map(int, data[1].split('-'))
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month

    if direction == 'prev':
        prev_month = (selected_month - 1) % 12
        prev_year = selected_year - 1 if prev_month == 0 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_menu(prev_year, prev_month))
        await state.update_data(selected_month=prev_month)
    elif direction == 'next':
        next_month = (selected_month) % 12
        next_year = selected_year + 1 if next_month == 1 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_menu(next_year, next_month))
        await state.update_data(selected_month=next_month)


@dp.callback_query_handler(lambda c: c.data == 'calendar', state='*')
async def show_admin_calendar_from_button(callback_query: CallbackQuery):
    current_date = datetime.now()
    year = current_date.year
    month = current_date.month
    current_day = current_date.day
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_calendar_menu(year, month))
    await Admins.ViewDay.set()


@dp.callback_query_handler(lambda c: json.loads(c.data).get('action') == 'day', state=Admins.ViewDay)
async def set_day(callback_query: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    print(state_data)
    if not state_data.get('selected_year'):
        data = json.loads(callback_query.data)
        selected_year = data.get('year')
        selected_month = data.get('month')
        selected_day = data.get('day')

        await state.update_data(selected_year=selected_year, selected_month=selected_month, selected_day=selected_day)
        reply_markup = get_calendar_menu(selected_year, selected_month, selected_day=selected_day, selected_month=selected_month)

    else:
        selected_year = state_data.get('selected_year')
        selected_month = state_data.get('selected_month')
        selected_day = state_data.get('selected_day')
        reply_markup = get_calendar_menu(selected_year, selected_month, selected_day, selected_month)
    await Admins.ViewHour.set()
    await callback_query.message.edit_reply_markup(reply_markup=reply_markup)


@dp.callback_query_handler(lambda c: c.data == 'action:choose_time', state=Admins.ViewHour)
async def choose_time(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_year = data.get('selected_year')
    selected_month = data.get('selected_month')
    selected_day = data.get('selected_day')
    keyboard = get_hour_menu(selected_year, selected_month, selected_day)
    await callback_query.message.edit_text(text='–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω—ã–µ —Å–ª–æ—Ç—ã' ,reply_markup=keyboard)
    await Admins.HOUR_CHOOSE.set()


@dp.callback_query_handler(lambda c: c.data == 'offline_appointment')
async def offline_appointment(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'", reply_markup=types.ReplyKeyboardRemove())
    await Offline.Name.set()


@dp.message_handler(state=Offline.Name)
async def set_name_offline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = message.chat.id
        new_name = message.text
        if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+$', new_name):
            data['new_name'] = new_name
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '+998XXXXXXXXX'.", reply_markup=types.ReplyKeyboardRemove())
            await Offline.Phnum.set()
        else:
            await message.answer("‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –§–ò–û –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@dp.message_handler(state=Offline.Phnum)
async def set_phnum_offline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        chat_id = message.chat.id
        new_phnum = message.text
        if re.match(r'^\+\d{12}$', new_phnum):
            data['new_phnum'] = new_phnum

            # Get the current year and month
            current_date = datetime.now()
            current_year = current_date.year
            current_month = current_date.month

            await message.answer(
                'üìÖ –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏√´–º, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞.\n'
                '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º –∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É. <b>–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–º–µ—Ç–∏–ª–∏ –¥–∞—Ç—É –≥–∞–ª–æ—á–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</b> "üïò –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:"',
                reply_markup=get_calendar_offline(current_year, current_month))
            await Appointment.SET_DAY.set()
            old_data = await state.get_data()
            db.update_user(chat_id, name=data['new_name'], phnum=data['new_phnum'])

        else:
            await message.answer(
                "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ '+998XXXXXXXXX'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


def get_calendar_offline(year, month, selected_day=None, selected_month=None):
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month
    current_day = current_date.day

    max_days = calendar.monthrange(year, month)[1]

    # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)

    next_month = (month + 1) % 12
    row = []
    if year == current_year and month != current_month:
        row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f'prev:{year}-{month:02d}'))
    row.append(InlineKeyboardButton(
        text=month_names[month - 1],  # –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        callback_data=f'month:{year}-{month:02d}'
    ))
    if (year == current_year and next_month >= current_month and next_month != current_month + 2) or (
            year > current_year):
        row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f'next:{year}-{next_month:02d}'))
    keyboard.row(*row)

    day_buttons = []
    day_row = []
    for day in range(1, max_days + 1):
        if (year == current_year and month == current_month and day < current_day) or (
                year == current_year and month < current_month):
            continue

        appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
        available_hours = db.get_available_hours(appointments_on_day)

        if available_hours:
            button_text = f"{day} ‚úÖ" if selected_day == day and selected_month == month else str(day)
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)
        else:
            button_text = f"{day} ‚ùå" if selected_day == day and selected_month == month else f"{day} ‚ùå"
            button = InlineKeyboardButton(text=button_text, callback_data=json.dumps(
                {'action': 'day', 'year': year, 'month': month, 'day': day}))
            day_row.append(button)

        if len(day_row) == 5:
            day_buttons.append(day_row)
            day_row = []

    if day_row:
        day_buttons.append(day_row)

    for row in day_buttons:
        keyboard.row(*row)

    keyboard.row(InlineKeyboardButton("üïò –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data='action:choose_time'))
    keyboard.row(InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='back_ad'))

    return keyboard


def get_hour_offline(year, month, day, selected_hour=None):
    start_hour = 8
    end_hour = 18
    keyboard = InlineKeyboardMarkup(row_width=3)

    appointments_on_day = db.get_appointments_on_day(db.session, year, month, day)
    available_hours = db.get_available_hours(appointments_on_day)

    for hour in range(start_hour, end_hour + 1):
        for minute in range(0, 60, 30):
            if hour == end_hour and minute > 0:
                break
            formatted_time = f"{hour:02d}:{minute:02d}"
            if formatted_time in available_hours:
                button_text = f"{formatted_time} ‚úÖ" if formatted_time == selected_hour else formatted_time
                button = InlineKeyboardButton(text=button_text, callback_data=f'hour:{formatted_time}')
                keyboard.insert(button)

    back_button = InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='back_ad')
    keyboard.row(back_button)

    return keyboard


@dp.callback_query_handler(lambda c: c.data.startswith('prev:') or c.data.startswith('next:'),
                           state=Offline.SET_DAY)
async def navigate_calendar(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split(':')
    direction = data[0]  # 'prev' or 'next'
    selected_year, selected_month = map(int, data[1].split('-'))
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month

    if direction == 'prev':
        prev_month = (selected_month - 1) % 12
        prev_year = selected_year - 1 if prev_month == 0 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_offline(prev_year, prev_month))
        await state.update_data(selected_month=prev_month)
    elif direction == 'next':
        next_month = (selected_month) % 12
        next_year = selected_year + 1 if next_month == 1 else selected_year
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=get_calendar_offline(next_year, next_month))
        await state.update_data(selected_month=next_month)


@dp.callback_query_handler(lambda c: json.loads(c.data).get('action') == 'day', state=Offline.SET_DAY)
async def set_day_offline(callback_query: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    print(state_data)
    if not state_data.get('selected_year'):
        await state.finish()
        data = json.loads(callback_query.data)
        selected_year = data.get('year')
        selected_month = data.get('month')
        selected_day = data.get('day')
        await state.update_data(selected_year=selected_year, selected_month=selected_month, selected_day=selected_day)
        reply_markup = get_calendar_menu(selected_year, selected_month, selected_day, selected_month)
    else:
        selected_year = state_data.get('selected_year')
        selected_month = state_data.get('selected_month')
        selected_day = state_data.get('selected_day')
        reply_markup = get_calendar_menu(selected_year, selected_month, selected_day, selected_month)
    await Offline.SET_HOUR.set()

    # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"
    await callback_query.message.edit_reply_markup(reply_markup=reply_markup)


@dp.callback_query_handler(lambda c: c.data == 'action:choose_time', state=Offline.SET_HOUR)
async def choose_time_offline(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_year = data.get('selected_year')
    selected_month = data.get('selected_month')
    selected_day = data.get('selected_day')

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π get_hour_menu —Å –≥–∞–ª–æ—á–∫–æ–π
    keyboard = get_hour_offline(selected_year, selected_month, selected_day)
    msg = f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É</b>: {selected_day} {keyboard.russian_month_names[selected_month - 1]} {selected_year}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–ø–∏—Å—å:'
    await callback_query.message.edit_text(msg, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await Appointment.SET_HOUR_CHOOSE.set()


@dp.callback_query_handler(lambda c: c.data.startswith('hour:'), state=Offline.SET_HOUR_CHOOSE)
async def set_hour_choose_offline(callback_query: CallbackQuery, state: FSMContext):
    print(callback_query.data)
    selected_hour = callback_query.data.split(':')[1]
    selected_minute = callback_query.data.split(':')[-1]
    print(f'hour {selected_hour}:{selected_minute}')
    data = await state.get_data()
    selected_month = data.get('selected_month')
    selected_day = data.get('selected_day')

    if selected_month is None:
        selected_month = datetime.now().month
    if selected_day is None:
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å.")
        return

    try:
        appointment_time = datetime(
            year=datetime.now().year,
            month=selected_month,
            day=selected_day,
            hour=int(selected_hour),
            minute=int(selected_minute)
        )
    except TypeError:
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    await callback_query.message.edit_text(
        'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ <b>—Å–∏–º–ø—Ç–æ–º—ã</b> –∏–ª–∏ <b>—Ü–µ–ª—å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏</b>. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –≤–∏–∑–∏—Ç—É.',
        reply_markup=keyboard.back_ad,
        parse_mode=ParseMode.HTML
    )
    await state.update_data(appointment_time=appointment_time, selected_hour=selected_hour)
    await Appointment.SET_REASON.set()


@dp.message_handler(lambda message: True, state=Offline.SET_REASON)
async def save_appointment_reason_offline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        appointment_time = data['appointment_time']
        chat_id = message.chat.id
        user_info = db.get_user_info(chat_id)
        user_id = message.from_user.id
        data['reason'] = message.text.strip()
        name = user_info['name']
        phnum = user_info['phnum']

        appointment_date = appointment_time.strftime(f"%d {keyboard.russian_month_names[appointment_time.month - 1]} %Y –≥–æ–¥–∞")
        appointment_time_str = appointment_time.strftime("%H:%M")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∫ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"

        confirmation_message_offline = (
            f"üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é <b>Denta Art</b>\n"
            f"<b>–§–ò–û</b>: {name}\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {phnum}\n"
            f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏</b>: {appointment_date}\n"
            f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏</b>: {appointment_time_str}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤/—Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞</b>: {data['reason']}\n\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å'. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥</i>"
        )

        await message.answer(
            text=confirmation_message_offline,
            reply_markup=keyboard.off_confirm
        )


@dp.callback_query_handler(lambda c: c.data == 'off_confirm', state=Offline.SET_REASON)
async def add_appointment_to_db_offline(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        appointment_time = data['appointment_time']
        selected_hour = data['selected_hour']
        chat_id = callback_query.from_user.id
        user_info = db.get_user_info(chat_id)
        user_id = callback_query.from_user.id
        reason = data['reason']
        name = user_info['name']
        phnum = user_info['phnum']
        appointment_date = appointment_time.strftime(f"%d {keyboard.russian_month_names[appointment_time.month - 1]} %Y –≥–æ–¥–∞")
        appointment_time_str = appointment_time.strftime("%H:%M")

        db.create_appointment_offline(name, phnum, reason, appointment_time)

        confirmation_message_offline = (
            f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–ñ–¥–µ–º –≤–∞—Å <b>{appointment_date} –≤ {appointment_time_str}</b>. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ '<b>Denta Art</b>'! ü¶∑\n\n"
            f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤ —Ä–∞–∑–¥–µ–ª–µ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' => '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'"
        )
        await callback_query.message.edit_text(confirmation_message_offline, parse_mode="HTML")
        await callback_query.message.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.admin_keyboard)
        await state.finish()

        group_chat_id = -921482477

        confirmation_group = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é\n"
            f"<b>–§–ò–û</b>: {name}\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {phnum}\n"
            f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏</b>: {appointment_date}\n"
            f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏</b>: {appointment_time_str}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤/—Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞</b>: {data['reason']}\n\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–µ–º–∞.</i>"
        )

        await bot.send_message(chat_id=group_chat_id, text=confirmation_group, parse_mode="HTML")


async def send_reminders():
    while True:
        current_time = datetime.now()
        upcoming_appointments = db.session.query(Appointment).filter(Appointment.time > current_time).all()

        for appointment in upcoming_appointments:
            time_left = appointment.time - current_time

            if time_left <= timedelta(hours=24):
                notification_text_24h = generate_notification_text(appointment, "24")
                asyncio.create_task(send_notification(appointment.chat_id, notification_text_24h, appointment.time - timedelta(hours=24)))

            if time_left <= timedelta(hours=1):
                notification_text_1h = generate_notification_text(appointment, "1")
                asyncio.create_task(send_notification(appointment.chat_id, notification_text_1h, appointment.time - timedelta(hours=1)))

        await asyncio.sleep(300)

async def send_notification(chat_id, notification_text, notification_time):
    await asyncio.sleep((notification_time - datetime.now()).total_seconds())
    await bot.send_message(chat_id, notification_text, parse_mode="HTML")

def generate_notification_text(appointment, hours_left):
    return (
        f"üÜï –£ –≤–∞—Å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ {hours_left} {'—á–∞—Å' if hours_left == '1' else '—á–∞—Å–∞'}\n"
        f"<b>–§–ò–û</b>: {appointment.name}\n"
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {appointment.phnum}\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏</b>: {appointment.time.strftime('%d %B %Y –≥–æ–¥–∞')}\n"
        f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏</b>: {appointment.time.strftime('%H:%M')}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤/—Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞</b>: {appointment.reason}\n\n\n"
        f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–µ–º–∞.</i>"
    )